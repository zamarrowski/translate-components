{"version":3,"sources":["../src/Translate.js"],"names":["Translate","props","context","translations","JSON","parse","defaultLanguage","debugMode","useRawText","state","language","window","addEventListener","_changeLanguage","bind","removeEventListener","_getText","children","_getDebugModeStyles","text","event","setState","detail","backgroundColor","Component","contextTypes","PropTypes","string","bool","propTypes","object","node"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;IAEMA,S;;;AACJ,qBAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA;;AAE1B,UAAKC,YAAL,GAAoBC,KAAKC,KAAL,CAAWH,QAAQC,YAAnB,CAApB;AACA,UAAKG,eAAL,GAAuBJ,QAAQI,eAA/B;AACA,UAAKC,SAAL,GAAiBL,QAAQK,SAAzB;AACA,UAAKC,UAAL,GAAkBP,MAAMO,UAAxB,CAL0B,CAKS;AACnC,UAAKC,KAAL,GAAa;AACXC,gBAAU,MAAKJ;AADJ,KAAb;AAN0B;AAS3B;;;;wCAEmB;AAClBK,aAAOC,gBAAP,CAAwB,8BAAxB,EAAwD,KAAKC,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAAxD;AACD;;;2CAEsB;AACrBH,aAAOI,mBAAP,CAA2B,8BAA3B,EAA2D,KAAKF,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAA3D;AACD;;;6BAEQ;AACP,aACE,KAAKN,UAAL,GACI,KAAKQ,QAAL,CAAc,KAAKf,KAAL,CAAWgB,QAAzB,CADJ,GAEI;AAAA;AAAA,UAAM,OAAO,KAAKC,mBAAL,CAAyB,KAAKjB,KAAL,CAAWgB,QAApC,CAAb;AAA6D,aAAKD,QAAL,CAAc,KAAKf,KAAL,CAAWgB,QAAzB;AAA7D,OAHN;AAKD;;;6BAEQE,I,EAAM;AACb,UAAI,KAAKV,KAAL,CAAWC,QAAX,KAAwB,KAAKJ,eAA7B,IAAgDa,IAApD,EAA0D;AACxD,YAAI,KAAKhB,YAAL,CAAkBgB,IAAlB,KAA2B,KAAKhB,YAAL,CAAkBgB,IAAlB,EAAwB,KAAKV,KAAL,CAAWC,QAAnC,CAA/B,EAA6E;AAC3E,iBAAO,KAAKP,YAAL,CAAkBgB,IAAlB,EAAwB,KAAKV,KAAL,CAAWC,QAAnC,CAAP;AACD,SAFD,MAEO;AACL,iBAAOS,IAAP;AACD;AACF,OAND,MAMO,IAAI,KAAKhB,YAAL,CAAkBgB,IAAlB,KAA2B,KAAKhB,YAAL,CAAkBgB,IAAlB,EAAwB,KAAKV,KAAL,CAAWC,QAAnC,CAA/B,EAA6E;AAClF,eAAO,KAAKP,YAAL,CAAkBgB,IAAlB,EAAwB,KAAKV,KAAL,CAAWC,QAAnC,CAAP;AACD,OAFM,MAGF;AACH,eAAOS,IAAP;AACD;AACF;;;oCAEeC,K,EAAO;AACrB,WAAKC,QAAL,CAAc,EAAEX,UAAUU,MAAME,MAAlB,EAAd;AACD;;;wCAEmBH,I,EAAM;AACxB,UAAI,KAAKZ,SAAL,IAAkBY,IAAlB,KAA2B,CAAC,KAAKhB,YAAL,CAAkBgB,IAAlB,CAAD,IAA6B,CAAC,KAAKhB,YAAL,CAAkBgB,IAAlB,EAAwB,KAAKV,KAAL,CAAWC,QAAnC,CAAD,IAAiD,KAAKD,KAAL,CAAWC,QAAX,IAAuB,KAAKJ,eAArI,CAAJ,EAA4J;AAC1J,eAAO,EAAEiB,iBAAiB,QAAnB,EAAP;AACD;AACD,aAAO,EAAP;AACD;;;;EApDqBC,gB;;AAwDxBxB,UAAUyB,YAAV,GAAyB;AACvBtB,gBAAcuB,oBAAUC,MADD;AAEvBrB,mBAAiBoB,oBAAUC,MAFJ;AAGvBpB,aAAWmB,oBAAUE;AAHE,CAAzB;;AAMA5B,UAAU6B,SAAV,GAAsB;AACpB1B,gBAAcuB,oBAAUI,MADJ;AAEpBxB,mBAAiBoB,oBAAUC,MAFP;AAGpBpB,aAAWmB,oBAAUE,IAHD;AAIpBpB,cAAYkB,oBAAUE,IAJF;AAKpBX,YAAUS,oBAAUK;AALA,CAAtB;;kBAQe/B,S","file":"Translate.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass Translate extends Component {\n  constructor(props, context) {\n    super()\n    this.translations = JSON.parse(context.translations)\n    this.defaultLanguage = context.defaultLanguage\n    this.debugMode = context.debugMode\n    this.useRawText = props.useRawText // useful to bind the text inside input placeholder, inside <option> elements, or when a <span> cannot be used\n    this.state = {\n      language: this.defaultLanguage\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('reactTranslateChangeLanguage', this._changeLanguage.bind(this))\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('reactTranslateChangeLanguage', this._changeLanguage.bind(this))\n  }\n\n  render() {\n    return (\n      this.useRawText\n        ? this._getText(this.props.children)\n        : <span style={this._getDebugModeStyles(this.props.children)}>{this._getText(this.props.children)}</span>\n    )\n  }\n\n  _getText(text) {\n    if (this.state.language !== this.defaultLanguage && text) {\n      if (this.translations[text] && this.translations[text][this.state.language]) {\n        return this.translations[text][this.state.language]\n      } else {\n        return text\n      }\n    } else if (this.translations[text] && this.translations[text][this.state.language]) {\n      return this.translations[text][this.state.language]\n    }\n    else {\n      return text\n    }\n  }\n\n  _changeLanguage(event) {\n    this.setState({ language: event.detail })\n  }\n\n  _getDebugModeStyles(text) {\n    if (this.debugMode && text && (!this.translations[text] || (!this.translations[text][this.state.language] && this.state.language != this.defaultLanguage))) {\n      return { backgroundColor: 'yellow' }\n    }\n    return {}\n  }\n\n}\n\nTranslate.contextTypes = {\n  translations: PropTypes.string,\n  defaultLanguage: PropTypes.string,\n  debugMode: PropTypes.bool\n}\n\nTranslate.propTypes = {\n  translations: PropTypes.object,\n  defaultLanguage: PropTypes.string,\n  debugMode: PropTypes.bool,\n  useRawText: PropTypes.bool,\n  children: PropTypes.node\n};\n\nexport default Translate\n"]}